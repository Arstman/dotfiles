(defvar primary-ids "[9, 1, 3, 5, 7]")
(defvar secondary-ids "[8, 10, 2, 4, 6]")

(deflisten keyboard-layout
  `tail -F /tmp/eww-keyboard-layout`
)

(deflisten brightness
  `tail -F /tmp/eww-brightness`
)

(deflisten colortemp
  `tail -F /tmp/eww-colortemp`
)

(deflisten volume
  `tail -F /tmp/eww-volume`)

(deflisten selected-ids 
  `tail -F /tmp/eww-workspaces`)

(defwindow primary
  :monitor 1
  :geometry (geometry 
    :x "0"
    :y "0%"
    :width "100%"
    :height "44px"
    :anchor "top center")
  :stacking "fg"
  :exclusive true
(centerbox
    :orientation "h"
    :hexpand true
  (widget-media)
  (widget-hypr-workspaces :ids primary-ids :monitor 0)
  (widget-statuslist)
  ))

(defwindow secondary
  :monitor 0
  :geometry (geometry  
    :x "0" 
    :y "0" 
    :width "100%" 
    :height "36px" 
    :anchor "center top")
  :stacking "bg"
  :exclusive true
(centerbox 
    :orientation "h" 
  (box)
  (widget-hypr-workspaces :ids secondary-ids :monitor 1)
  (box)
  ))

(defwidget widget-hypr-workspaces [ids monitor]
(eventbox
    :vexpand true
    :hexpand true
    :onscroll "[ {} = 'up' ] && val='next' || val='prev'; plsdo workspace focus $val ${monitor}"
  (box 
      :vexpand true
      :hexpand true
      :valign "fill"
      :orientation "h"
      :class "hypr-workspaces monitor-${monitor}"
    (for id in ids
      (widget-hypr-workspace :id id :monitor monitor)
      )
    )
  )
)

(defwidget widget-hypr-workspace [id monitor]
(eventbox 
    :onclick "plsdo workspace focus id ${id}"
    :class "hypr-workspace monitor-${monitor} \
      ${selected-ids[monitor] == id ? "active" : ""} \
      ${jq(selected-ids, ".[2] | map(select(. == ${id})) | length") > 0 ? "occupied" : ""} \
      "
    :halign "center"
    :valign "center"
    :width 60
  (overlay 
    (box :class "hypr-workspace-empty" "○")
    (box :class "hypr-workspace-filled" "◉")
    )
  )
)

; takes icon widget as child
(defwidget widget-status [val ?onscroll ?onclick]
(eventbox 
    :halign "center"
    :valign "top"
    :onscroll onscroll
    :onclick onclick
    :width 72 
    :class "status"
    (box :spacing 2
      (children)
      (box :halign "start" :class "status-value" val))
))

(defwidget widget-media []
(box)
)

(defwidget widget-statuslist []
(box 
    :space-evenly false
    :orientation "h"
    :halign "end"
    :class "statuslist"
    :spacing 8 
  (box 
      :orientation "h"
      :spacing 8
    (widget-status
        :val {keyboard-layout[1]}
        :onclick "plsdo keyboard_layout choose"
        :onscroll "[ {} = 'up' ] && val='next' || val='prev'; plsdo keyboard_layout $val"
        (box
            :class "status-icon keyboard-layout-icon"
            ""
          )
      )
    (widget-status 
        :val brightness
        :onscroll "plsdo brightness -d {} 10"
      (box
          :class "status-icon brightness-icon"
          ""
        )
      )
    (widget-status
        :val {round(colortemp / 100, 0)}
        :onscroll "plsdo colortemp -d {} 200"
      (box 
          :class "status-icon colortemp-icon"
          ""
        )
      )
    (widget-status 
        :val {round(EWW_TEMPS?.K10TEMP_TCTL ?: 0, 0)} 
        :onclick "plsdo workspace open_pinned btop"
      (box 
          :class "status-icon cpu-icon"
          ""
        )
      )
    (widget-status 
        :val volume
        :onscroll "eww-volume {}"
        :onclick "plsdo workspace open_pinned pulsemixer"
      (box 
          :class "status-icon volume-icon"
          ""
        )
      )
    )
  (widget-time)
  )
)

(defwidget widget-time []
(eventbox 
    :class "time status"
    :width 120
    time
  ))

(defpoll time :interval "1s" "date '+%I:%M %p'")
