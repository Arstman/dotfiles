(defvar primary-ids "[1, 2, 3, 4, 5]")
(defvar secondary-ids "[6, 7, 8, 9, 10]")
(defvar all-ids "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]")

; Eww wants some of the initial values to exist, otherwise it logs errors when
; loading. Initial values should be unused!

(deflisten keyboard-layout
  `tail -F /home/rg/.cache/keyboard-layout`
)

(deflisten brightness
  `tail -F /tmp/eww-brightness`
)

(deflisten colortemp
  :initial "0"
  `tail -F /tmp/eww-colortemp`
)

(deflisten audio
  :initial "{\"value\":25,\"is_muted\":false,\"output\":\"Headphones\"}"
  `tail -F /tmp/eww-audio`)

(deflisten workspace-state
  :initial "{\"active_primary_workspace_id\":0,\"active_secondary_workspace_id\":null,\"occupied_workspace_ids\":[]}"
  `tail -F /tmp/eww-workspaces`)

(deflisten submap
  :initial ""
  `tail -F /tmp/hypr-submap`)

(defpoll torrent :interval "5s" "plsdo torrent")

(defwindow primary
  :monitor "HDMI-A-1" 
  :geometry (geometry 
    :x "0"
    :y "0%"
    :width "100%"
    :height "44px"
    :anchor "top center")
  :stacking "fg"
  :exclusive true
(centerbox
    :orientation "h"
    :hexpand true
  (widget-media)
  (widget-hypr-workspaces :ids primary-ids :monitor "primary")
  (widget-statuslist)
  ))

(defwindow primary-single
  :monitor "HDMI-A-1" 
  :geometry (geometry 
    :x "0"
    :y "0%"
    :width "100%"
    :height "44px"
    :anchor "top center")
  :stacking "fg"
  :exclusive true
(centerbox
    :orientation "h"
    :hexpand true
  (widget-media)
  (widget-hypr-workspaces :ids all-ids :monitor "primary")
  (widget-statuslist)
  ))

(defwindow secondary
  :monitor "DP-1" 
  :geometry (geometry  
    :x "0" 
    :y "0" 
    :width "100%" 
    :height "36px" 
    :anchor "center top")
  :stacking "fg"
  :exclusive true
(centerbox 
    :orientation "h" 
  (box)
  (widget-hypr-workspaces :ids secondary-ids :monitor "secondary")
  (box)
  ))

(defwidget widget-hypr-workspaces [ids monitor]
(eventbox
    :vexpand true
    :hexpand true
    :onscroll "[ {} = 'up' ] && val='next' || val='prev'; plsdo workspace focus $val ${monitor}"
  (box 
      :vexpand true
      :hexpand true
      :valign "fill"
      :orientation "h"
    (for id in ids
      (widget-hypr-workspace :id id :monitor monitor)
      )
    )
  )
)

(defwidget widget-hypr-workspace [id monitor]
(eventbox 
    :onclick "plsdo workspace focus id ${id}"
    :class "hypr-workspace \
      ${workspace-state["active_${monitor}_workspace_id"] == id ? "active" : ""} \
      ${jq(workspace-state, ".occupied_workspace_ids | contains([${id}])") ? "occupied" : ""}"
    :halign "center"
    :valign "center"
    :width 60
  (overlay 
    (box :class "hypr-workspace-empty" "○")
    (box :class "hypr-workspace-filled" "◉")
    )
  )
)

; takes icon widget as child
(defwidget widget-status [val ?onscroll ?onclick ?onrightclick ?value-class ?visible]
(eventbox 
    :halign "center"
    :onscroll onscroll
    :onclick onclick
    :onrightclick onrightclick
    :width 72 
    :visible {visible == "" ? true : visible}
    :class "status"
    (box :spacing 2
      (children)
      (box :halign "start" :class "status-value ${value-class}" val))
))

(defwidget widget-media []
(box)
)

(defwidget widget-statuslist []
(box 
    :space-evenly false
    :orientation "h"
    :halign "end"
    :class "statuslist"
    :spacing 8 
  (widget-submap)
  (box 
      :space-evenly false
      :orientation "h"
      :spacing 8
    (widget-torrent)
    (widget-status
        :val {keyboard-layout.layout_id}
        :onclick "plsdo keyboard choose"
        (box
            :class "status-icon keyboard-layout-icon"
            ""
          )
      )
    (widget-status 
        :val brightness
        :onscroll "plsdo brightness -d {} 10"
      (box
          :class "status-icon brightness-icon"
          ""
        )
      )
    (widget-status
        :val {round(colortemp / 100, 0)}
        :onscroll "plsdo colortemp -d {} 200"
      (box 
          :class "status-icon colortemp-icon"
          ""
        )
      )
    (widget-status 
        :val {round(EWW_TEMPS?.K10TEMP_TCTL ?: 0, 0)} 
        :onclick "plsdo workspace open_pinned btop"
      (box 
          :class "status-icon cpu-icon"
          ""
        )
      )
    (widget-status 
        :val {audio.volume}
        :onscroll "[ {} = 'up' ] && val=5 || val=-5; plsdo audio volume set -r $val"
        :onclick "plsdo workspace open_pinned pulsemixer"
        :onrightclick "plsdo audio volume toggle-mute"
        :value-class "volume-${audio.is_muted ? "muted" : "unmuted"}"
      (box 
          :class "status-icon volume-icon volume-${audio.is_muted ? "muted" : "unmuted"}"
          {audio.output == "Headphones" ? "" :
           audio.output == "Speakers" ? "" :
           audio.output == "Earbuds" ? "" :
           "?"}
        )
      )
    )
  (widget-time)
  )
)

(defwidget widget-torrent []
  (widget-status
    :visible "${strlength(torrent) > 0}"
    :val {torrent}
    :onclick "hyprctl dispatch exec [float] transmission-list"
    (box :class "status-icon torrent-icon" "⇋")
  )
)

(defwidget widget-submap []
  (box :class "${strlength(submap) > 0 ? "submap" : ""}" {strlength(submap) > 0 ? submap : ""})
)

(defwidget widget-time []
(eventbox 
    :class "time status"
    :width 120
    time
  ))

(defpoll time :interval "1s" "date '+%I:%M %p'")
